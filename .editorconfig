root = true

# All Files
[*]
charset = utf-8
indent_style = space
indent_size = 4
insert_final_newline = true
trim_trailing_whitespace = true
end_of_line = crlf

[*.sln]
indent_style = tab

[*.{csproj,vbproj,vcxproj.filters,proj,projitems,shproj}]
indent_size = 2
space_inside_empty_tag = true

[*.{xml,config,props,targets,nuspec,resx,ruleset,vsixmanifest,vsct}]
indent_size = 2

[*.{json,json5,webmanifest,dec}]
indent_size = 2

[*.{yml,yaml}]
indent_size = 2

[*.{md,mdx}]
trim_trailing_whitespace = false

[*.{htm,html,js,jsm,ts,tsx,cjs,cts,ctsx,mjs,mts,mtsx,css,sass,scss,less,pcss,svg,vue}]
indent_size = 2

[*.{cmd,bat}]
end_of_line = crlf

[*.sh]
end_of_line = lf

[*.{cs,csx,cake}]
csharp_style_unused_value_expression_statement_preference = discard_variable:suggestion
dotnet_diagnostic.IDE0058.severity = none
dotnet_style_prefer_conditional_expression_over_assignment = false:suggestion
csharp_style_unused_value_assignment_preference = discard_variable:suggestion
dotnet_diagnostic.IDE0059.severity = suggestion

# [*.{cs,csx,cake,vb,vbx}]
# dotnet_analyzer_diagnostic.severity = warning

# [*.{cs,csx,cake,vb,vbx}]
# dotnet_style_qualification_for_field = false:warning
# dotnet_style_qualification_for_property = false:warning
# dotnet_style_qualification_for_method = false:warning
# dotnet_style_qualification_for_event = false:warning
# dotnet_style_predefined_type_for_locals_parameters_members = true:warning
# dotnet_style_predefined_type_for_member_access = true:warning
# dotnet_style_require_accessibility_modifiers = always:warning
# csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:warning
# visual_basic_preferred_modifier_order = Partial,Default,Private,Protected,Public,Friend,NotOverridable,Overridable,MustOverride,Overloads,Overrides,MustInherit,NotInheritable,Static,Shared,Shadows,ReadOnly,WriteOnly,Dim,Const,WithEvents,Widening,Narrowing,Custom,Async:warning
# dotnet_style_readonly_field = true:warning
# dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:warning
# dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:warning
# dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:warning
# dotnet_style_parentheses_in_other_operators = never_if_unnecessary:warning
# dotnet_style_object_initializer = true:warning
# dotnet_style_collection_initializer = true:warning
# dotnet_style_explicit_tuple_names = true:warning
# dotnet_style_prefer_inferred_tuple_names = true:warning
# dotnet_style_prefer_inferred_anonymous_type_member_names = true:warning
# dotnet_style_prefer_auto_properties = true:warning
# dotnet_style_prefer_conditional_expression_over_assignment = false:suggestion
# dotnet_diagnostic.IDE0045.severity = suggestion
# dotnet_style_prefer_conditional_expression_over_return = false:suggestion
# dotnet_diagnostic.IDE0046.severity = suggestion
# dotnet_style_prefer_compound_assignment = true:warning
# dotnet_style_prefer_simplified_interpolation = true:warning
# dotnet_style_prefer_simplified_boolean_expressions = true:warning
# dotnet_style_coalesce_expression = true:warning
# dotnet_style_null_propagation = true:warning
# dotnet_style_prefer_is_null_check_over_reference_equality_method = true:warning
# dotnet_style_operator_placement_when_wrapping = end_of_line:warning
# csharp_style_prefer_null_check_over_type_check = true:warning
# dotnet_style_namespace_match_folder = true:suggestion
# dotnet_diagnostic.IDE0130.severity = suggestion
# dotnet_diagnostic.IDE0090.severity = suggestion # Simplify new expression
# dotnet_diagnostic.IDE0290.severity = suggestion # Use primary constructors

# [*.{cs,csx,cake}]
# csharp_style_var_for_built_in_types = true:warning
# csharp_style_var_when_type_is_apparent = true:warning
# csharp_style_var_elsewhere = true:warning
# csharp_style_expression_bodied_methods=when_on_single_line:suggestion
# csharp_style_expression_bodied_constructors = false:none
# csharp_style_expression_bodied_operators = true:warning
# csharp_style_expression_bodied_properties = true:warning
# csharp_style_expression_bodied_indexers = true:warning
# csharp_style_expression_bodied_accessors = true:warning
# csharp_style_expression_bodied_lambdas = true:warning
# csharp_style_expression_bodied_local_functions = true:warning
# csharp_style_pattern_matching_over_is_with_cast_check = true:warning
# csharp_style_pattern_matching_over_as_with_null_check = true:warning
# csharp_style_prefer_switch_expression = true:warning
# csharp_style_prefer_pattern_matching = true:warning
# csharp_style_prefer_not_pattern = true:warning
# csharp_style_inlined_variable_declaration = true:warning
# csharp_prefer_simple_default_expression = true:warning
# csharp_style_pattern_local_over_anonymous_function = true:warning
# csharp_style_deconstructed_variable_declaration = true:warning
# csharp_style_prefer_index_operator = true:warning
# csharp_style_prefer_range_operator = true:warning
# csharp_style_implicit_object_creation_when_type_is_apparent = true:warning
# csharp_style_throw_expression = true:warning
# csharp_style_conditional_delegate_call = true:warning
# csharp_prefer_braces = true:warning
# csharp_prefer_simple_using_statement = true:suggestion
# dotnet_diagnostic.IDE0063.severity = suggestion
# csharp_using_directive_placement = outside_namespace:warning
# csharp_prefer_static_local_function = true:warning
# csharp_style_namespace_declarations = file_scoped:warning

# [*.{cs,csx,cake,vb,vbx}]
# dotnet_code_quality_unused_parameters = all:warning
# dotnet_remove_unnecessary_suppression_exclusions = none:warning

# [*.{cs,csx,cake}]
# csharp_style_unused_value_expression_statement_preference = discard_variable:suggestion
# dotnet_diagnostic.IDE0058.severity = none
# csharp_style_unused_value_assignment_preference = discard_variable:suggestion
# dotnet_diagnostic.IDE0059.severity = suggestion

# [*.{cs,csx,cake,vb,vbx}]
# dotnet_sort_system_directives_first = true
# dotnet_separate_import_directive_groups = false

# [*.{cs,csx,cake}]
# csharp_new_line_before_open_brace = all
# csharp_new_line_before_else = true
# csharp_new_line_before_catch = true
# csharp_new_line_before_finally = true
# csharp_new_line_before_members_in_object_initializers = true
# csharp_new_line_before_members_in_anonymous_types = true
# csharp_new_line_between_query_expression_clauses = true
# csharp_indent_case_contents = true
# csharp_indent_switch_labels = true
# csharp_indent_labels = no_change
# csharp_indent_block_contents = true
# csharp_indent_braces = false
# csharp_indent_case_contents_when_block = false
# csharp_space_after_cast = false
# csharp_space_after_keywords_in_control_flow_statements = true
# csharp_space_between_parentheses = false
# csharp_space_before_colon_in_inheritance_clause = true
# csharp_space_after_colon_in_inheritance_clause = true
# csharp_space_around_binary_operators = before_and_after
# csharp_space_between_method_declaration_parameter_list_parentheses = false
# csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
# csharp_space_between_method_declaration_name_and_open_parenthesis = false
# csharp_space_between_method_call_parameter_list_parentheses = false
# csharp_space_between_method_call_empty_parameter_list_parentheses = false
# csharp_space_between_method_call_name_and_opening_parenthesis = false
# csharp_space_after_comma = true
# csharp_space_before_comma = false
# csharp_space_after_dot = false
# csharp_space_before_dot = false
# csharp_space_after_semicolon_in_for_statement = true
# csharp_space_before_semicolon_in_for_statement = false
# csharp_space_around_declaration_statements = false
# csharp_space_before_open_square_brackets = false
# csharp_space_between_empty_square_brackets = false
# csharp_space_between_square_brackets = false
# csharp_preserve_single_line_statements = false
# csharp_preserve_single_line_blocks = true

# [*.{cs,csx,cake,vb,vbx}]
# dotnet_naming_style.camel_case_style.capitalization = camel_case
# dotnet_naming_style.pascal_case_style.capitalization = pascal_case
# dotnet_naming_style.first_upper_style.capitalization = first_word_upper
# dotnet_naming_style.prefix_interface_with_i_style.capitalization = pascal_case
# dotnet_naming_style.prefix_interface_with_i_style.required_prefix = I
# dotnet_naming_style.prefix_type_parameters_with_t_style.capitalization = pascal_case
# dotnet_naming_style.prefix_type_parameters_with_t_style.required_prefix = T
# dotnet_naming_symbols.public_protected_constant_fields_group.applicable_accessibilities = public, protected, protected_internal
# dotnet_naming_symbols.public_protected_constant_fields_group.required_modifiers         = const
# dotnet_naming_symbols.public_protected_constant_fields_group.applicable_kinds           = field
# dotnet_naming_rule.public_protected_constant_fields_must_be_pascal_case_rule.symbols    = public_protected_constant_fields_group
# dotnet_naming_rule.public_protected_constant_fields_must_be_pascal_case_rule.style      = pascal_case_style
# dotnet_naming_rule.public_protected_constant_fields_must_be_pascal_case_rule.severity   = warning
# dotnet_naming_symbols.public_protected_static_readonly_fields_group.applicable_accessibilities = public, protected, protected_internal
# dotnet_naming_symbols.public_protected_static_readonly_fields_group.required_modifiers         = static, readonly
# dotnet_naming_symbols.public_protected_static_readonly_fields_group.applicable_kinds           = field
# dotnet_naming_rule.public_protected_static_readonly_fields_must_be_pascal_case_rule.symbols    = public_protected_static_readonly_fields_group
# dotnet_naming_rule.public_protected_static_readonly_fields_must_be_pascal_case_rule.style      = pascal_case_style
# dotnet_naming_rule.public_protected_static_readonly_fields_must_be_pascal_case_rule.severity   = warning
# dotnet_naming_symbols.other_public_protected_fields_group.applicable_accessibilities = public, protected, protected_internal
# dotnet_naming_symbols.other_public_protected_fields_group.applicable_kinds           = field
# dotnet_naming_rule.other_public_protected_fields_disallowed_rule.symbols             = other_public_protected_fields_group
# dotnet_naming_rule.other_public_protected_fields_disallowed_rule.style               = disallowed_style
# dotnet_naming_rule.other_public_protected_fields_disallowed_rule.severity            = error
# dotnet_naming_symbols.stylecop_constant_fields_group.applicable_accessibilities = public, internal, protected_internal, protected, private_protected, private
# dotnet_naming_symbols.stylecop_constant_fields_group.required_modifiers         = const
# dotnet_naming_symbols.stylecop_constant_fields_group.applicable_kinds           = field
# dotnet_naming_rule.stylecop_constant_fields_must_be_pascal_case_rule.symbols    = stylecop_constant_fields_group
# dotnet_naming_rule.stylecop_constant_fields_must_be_pascal_case_rule.style      = pascal_case_style
# dotnet_naming_rule.stylecop_constant_fields_must_be_pascal_case_rule.severity   = warning
# dotnet_naming_symbols.stylecop_static_readonly_fields_group.applicable_accessibilities = public, internal, protected_internal, protected, private_protected, private
# dotnet_naming_symbols.stylecop_static_readonly_fields_group.required_modifiers         = static, readonly
# dotnet_naming_symbols.stylecop_static_readonly_fields_group.applicable_kinds           = field
# dotnet_naming_rule.stylecop_static_readonly_fields_must_be_pascal_case_rule.symbols    = stylecop_static_readonly_fields_group
# dotnet_naming_rule.stylecop_static_readonly_fields_must_be_pascal_case_rule.style      = pascal_case_style
# dotnet_naming_rule.stylecop_static_readonly_fields_must_be_pascal_case_rule.severity   = warning
# dotnet_naming_symbols.stylecop_fields_must_be_private_group.applicable_accessibilities = public, internal, protected_internal, protected, private_protected
# dotnet_naming_symbols.stylecop_fields_must_be_private_group.applicable_kinds           = field
# dotnet_naming_rule.stylecop_instance_fields_must_be_private_rule.symbols               = stylecop_fields_must_be_private_group
# dotnet_naming_rule.stylecop_instance_fields_must_be_private_rule.style                 = disallowed_style
# dotnet_naming_rule.stylecop_instance_fields_must_be_private_rule.severity              = error
# dotnet_naming_rule.private_members_with_underscore.symbols  = private_fields
# dotnet_naming_rule.private_members_with_underscore.style    = prefix_underscore
# dotnet_naming_rule.private_members_with_underscore.severity = suggestion
# dotnet_naming_symbols.private_fields.applicable_kinds           = field
# dotnet_naming_symbols.private_fields.applicable_accessibilities = private
# dotnet_naming_symbols.private_fields.required_modifiers         = readonly
# dotnet_naming_style.prefix_underscore.capitalization = camel_case
# dotnet_naming_style.prefix_underscore.required_prefix = _
# dotnet_naming_symbols.stylecop_local_fields_group.applicable_accessibilities = local
# dotnet_naming_symbols.stylecop_local_fields_group.applicable_kinds           = local
# dotnet_naming_rule.stylecop_local_fields_must_be_camel_case_rule.symbols     = stylecop_local_fields_group
# dotnet_naming_rule.stylecop_local_fields_must_be_camel_case_rule.style       = camel_case_style
# dotnet_naming_rule.stylecop_local_fields_must_be_camel_case_rule.severity    = silent
# dotnet_naming_symbols.sanity_check_uncovered_field_case_group.applicable_accessibilities = *
# dotnet_naming_symbols.sanity_check_uncovered_field_case_group.applicable_kinds           = field
# dotnet_naming_rule.sanity_check_uncovered_field_case_rule.symbols  = sanity_check_uncovered_field_case_group
# dotnet_naming_rule.sanity_check_uncovered_field_case_rule.style    = internal_error_style
# dotnet_naming_rule.sanity_check_uncovered_field_case_rule.severity = error
# dotnet_naming_symbols.element_group.applicable_kinds = namespace, class, enum, struct, delegate, event, method, property
# dotnet_naming_rule.element_rule.symbols              = element_group
# dotnet_naming_rule.element_rule.style                = pascal_case_style
# dotnet_naming_rule.element_rule.severity             = warning
# dotnet_naming_symbols.interface_group.applicable_kinds = interface
# dotnet_naming_rule.interface_rule.symbols              = interface_group
# dotnet_naming_rule.interface_rule.style                = prefix_interface_with_i_style
# dotnet_naming_rule.interface_rule.severity             = warning
# dotnet_naming_symbols.type_parameter_group.applicable_kinds = type_parameter
# dotnet_naming_rule.type_parameter_rule.symbols              = type_parameter_group
# dotnet_naming_rule.type_parameter_rule.style                = prefix_type_parameters_with_t_style
# dotnet_naming_rule.type_parameter_rule.severity             = warning
# dotnet_naming_symbols.parameters_group.applicable_kinds = parameter
# dotnet_naming_rule.parameters_rule.symbols              = parameters_group
# dotnet_naming_rule.parameters_rule.style                = camel_case_style
# dotnet_naming_rule.parameters_rule.severity             = warning

# [*.{cs}]
# dotnet_diagnostic.CA1014.severity = none # Mark assemblies with CLSCompliantAttribute
# dotnet_diagnostic.CA1062.severity = none # Validate arguments of public methods
# dotnet_diagnostic.CA1303.severity = none # Do not pass literals as localized parameters
# dotnet_diagnostic.CA1307.severity = suggestion # Specify StringComparison for clarity
# dotnet_diagnostic.CA1812.severity = none # Supress "CA1812: Avoid uninstantiated internal classes"
# dotnet_diagnostic.CA1848.severity = none # Use the LoggerMessage delegates
# dotnet_diagnostic.CA2007.severity = none # Do not directly await a Task
# dotnet_diagnostic.CA2234.severity = none # Pass System.Uri objects instead of strings
# dotnet_code_quality.ca1711.allowed_suffixes = EventHandler|EventHandlers # Allow arbitrary class names to end in "EventHandler" or "EventHandlers"
# dotnet_diagnostic.CS1573.severity = none # Parameter 'parameter' has no matching param tag in the XML comment for 'parameter'
# dotnet_diagnostic.CS1591.severity = none # Missing XML comment for publicly visible type or member
# dotnet_diagnostic.CS1712.severity = none # Type parameter 'type parameter' has no matching typeparam tag in the XML comment on 'type'

# [*.{cs}]
# dotnet_diagnostic.RCS0056.severity = suggestion # A line is too long
# dotnet_diagnostic.RCS1070.severity = none # Remove redundant default switch section
# dotnet_diagnostic.RCS1181.severity = suggestion # Convert comment to documentation comment
# dotnet_diagnostic.RCS1260.severity = suggestion # Add/remove trailing comma

# roslynator_trailing_comma_style = omit_when_single_line
# roslynator_max_line_length = 160

# [*.{cs}]
# resharper_redundant_argument_default_value_highlighting = suggestion
# resharper_simplify_linq_expression_use_all_highlighting = none
# resharper_unused_type_global_highlighting = none
# resharper_class_never_instantiated_global_highlighting = none
# resharper_trailing_comma_in_multiline_lists = true
# resharper_trailing_comma_in_singleline_lists = false

# resharper_csharp_max_line_length = 160 # Should be the same as roslynator_max_line_length
